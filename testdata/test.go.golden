package testdata

import (
	"fmt"
	"strings"

	"github.com/ghostiam/protogetter/testdata/proto"
)

type Test struct {
	Embedded *proto.Embedded
}

func testInvalid(t *proto.Test) {
	func(...interface{}) {}(t.GetB(), t.GetD()) // want `avoid direct access to proto field t\.B, use t\.GetB\(\) instead` `avoid direct access to proto field t\.D, use t\.GetD\(\) instead`
	func(...interface{}) {}(t.GetB(), t.GetD()) // want `avoid direct access to proto field t\.D, use t\.GetD\(\) instead`
	func(...interface{}) {}(t.GetB(), t.GetD()) // want `avoid direct access to proto field t\.B, use t\.GetB\(\) instead`

	_ = t.GetD()                                                  // want `avoid direct access to proto field t\.D, use t\.GetD\(\) instead`
	_ = t.GetF()                                                  // want `avoid direct access to proto field t\.F, use t\.GetF\(\) instead`
	_ = t.GetI32()                                                // want `avoid direct access to proto field t\.I32, use t\.GetI32\(\) instead`
	_ = t.GetI64()                                                // want `avoid direct access to proto field t\.I64, use t\.GetI64\(\) instead`
	_ = t.GetU32()                                                // want `avoid direct access to proto field t\.U32, use t\.GetU32\(\) instead`
	_ = t.GetU64()                                                // want `avoid direct access to proto field t\.U64, use t\.GetU64\(\) instead`
	_ = t.GetT()                                                  // want `avoid direct access to proto field t\.T, use t\.GetT\(\) instead`
	_ = t.GetB()                                                  // want `avoid direct access to proto field t\.B, use t\.GetB\(\) instead`
	_ = t.GetS()                                                  // want `avoid direct access to proto field t\.S, use t\.GetS\(\) instead`
	_ = t.GetEmbedded()                                           // want `avoid direct access to proto field t\.Embedded, use t\.GetEmbedded\(\) instead`
	_ = t.GetEmbedded().GetS()                                    // want `avoid direct access to proto field t\.Embedded\.S, use t\.GetEmbedded\(\)\.GetS\(\) instead`
	_ = t.GetEmbedded().GetS()                                    // want `avoid direct access to proto field t\.GetEmbedded\(\)\.S, use t\.GetEmbedded\(\)\.GetS\(\) instead`
	_ = t.GetEmbedded().GetEmbedded()                             // want `avoid direct access to proto field t\.Embedded\.Embedded, use t\.GetEmbedded\(\)\.GetEmbedded\(\) instead`
	_ = t.GetEmbedded().GetEmbedded()                             // want `avoid direct access to proto field t\.GetEmbedded\(\)\.Embedded, use t\.GetEmbedded\(\)\.GetEmbedded\(\) instead`
	_ = t.GetEmbedded().GetEmbedded().GetS()                      // want `avoid direct access to proto field t\.Embedded\.Embedded\.S, use t\.GetEmbedded\(\)\.GetEmbedded\(\).GetS\(\) instead`
	_ = t.GetEmbedded().GetEmbedded().GetS()                      // want `avoid direct access to proto field t\.GetEmbedded\(\)\.GetEmbedded\(\)\.S, use t\.GetEmbedded\(\)\.GetEmbedded\(\)\.GetS\(\) instead`
	_ = t.GetRepeatedEmbeddeds()                                  // want `avoid direct access to proto field t\.RepeatedEmbeddeds, use t\.GetRepeatedEmbeddeds\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[0]                               // want `avoid direct access to proto field t\.RepeatedEmbeddeds, use t\.GetRepeatedEmbeddeds\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[0].GetS()                        // want `avoid direct access to proto field t\.RepeatedEmbeddeds\[0\]\.S, use t\.GetRepeatedEmbeddeds\(\)\[0\]\.GetS\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[0].GetS()                        // want `avoid direct access to proto field t\.GetRepeatedEmbeddeds\(\)\[0\]\.S, use t\.GetRepeatedEmbeddeds\(\)\[0\]\.GetS\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[0].GetEmbedded()                 // want `avoid direct access to proto field t\.RepeatedEmbeddeds\[0\]\.Embedded, use t\.GetRepeatedEmbeddeds\(\)\[0\]\.GetEmbedded\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[0].GetEmbedded()                 // want `avoid direct access to proto field t\.GetRepeatedEmbeddeds\(\)\[0\]\.Embedded, use t\.GetRepeatedEmbeddeds\(\)\[0\]\.GetEmbedded\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[0].GetEmbedded().GetS()          // want `avoid direct access to proto field t\.RepeatedEmbeddeds\[0\]\.Embedded\.S, use t\.GetRepeatedEmbeddeds\(\)\[0\].GetEmbedded\(\).GetS\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[0].GetEmbedded().GetS()          // want `avoid direct access to proto field t\.GetRepeatedEmbeddeds\(\)\[0\].GetEmbedded\(\).S, use t\.GetRepeatedEmbeddeds\(\)\[0\].GetEmbedded\(\).GetS\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[t.GetI64()].GetEmbedded().GetS() // want `avoid direct access to proto field t\.RepeatedEmbeddeds\[t.I64\]\.Embedded\.S, use t\.GetRepeatedEmbeddeds\(\)\[t\.GetI64\(\)\].GetEmbedded\(\).GetS\(\) instead`
	_ = t.GetRepeatedEmbeddeds()[t.GetI64()].GetEmbedded().GetS() // want `avoid direct access to proto field t\.GetRepeatedEmbeddeds\(\)\[t\.I64\]\.GetEmbedded\(\)\.S, use t\.GetRepeatedEmbeddeds\(\)\[t\.GetI64\(\)\]\.GetEmbedded\(\).GetS\(\) instead`

	var many []*proto.Test
	manyIndex := 42

	_ = many[0].GetT()                             // want `avoid direct access to proto field many\[0\]\.T, use many\[0\]\.GetT\(\) instead`
	_ = many[1].GetEmbedded().GetS()               // want `avoid direct access to proto field many\[1\]\.Embedded\.S, use many\[1\]\.GetEmbedded\(\)\.GetS\(\) instead`
	_ = many[2].GetEmbedded().GetS()               // want `avoid direct access to proto field many\[2\]\.GetEmbedded\(\)\.S, use many\[2\].GetEmbedded\(\)\.GetS\(\) instead`
	_ = many[3].GetEmbedded().GetEmbedded().GetS() // want `avoid direct access to proto field many\[3\]\.Embedded\.Embedded\.S, use many\[3\].GetEmbedded\(\)\.GetEmbedded\(\)\.GetS\(\) instead`
	_ = many[manyIndex].GetS()                     // want `avoid direct access to proto field many\[manyIndex\]\.S, use many\[manyIndex\]\.GetS\(\) instead`

	test := many[0].GetEmbedded().GetS() == "" || t.GetEmbedded().CustomMethod() == nil || t.GetS() == "" || t.GetEmbedded() == nil // want `avoid direct access to proto field many\[0\]\.Embedded\.S, use many\[0\]\.GetEmbedded\(\).GetS\(\) instead` `avoid direct access to proto field t\.Embedded\.CustomMethod\(\), use t\.GetEmbedded\(\)\.CustomMethod\(\) instead` `avoid direct access to proto field t\.S, use t\.GetS\(\) instead` `avoid direct access to proto field t\.Embedded, use t\.GetEmbedded\(\) instead`
	_ = test

	other := proto.Other{}
	_ = other.MyMethod(nil).GetS() // want `avoid direct access to proto field other\.MyMethod\(nil\)\.S, use other\.MyMethod\(nil\)\.GetS\(\) instead`

	ems := t.GetRepeatedEmbeddeds() // want `avoid direct access to proto field t\.RepeatedEmbeddeds, use t\.GetRepeatedEmbeddeds\(\) instead`
	_ = ems[len(ems)-1].GetS()      // want `avoid direct access to proto field ems\[len\(ems\)-1\]\.S, use ems\[len\(ems\)-1\]\.GetS\(\) instead`

	ch := make(chan string)
	ch <- t.GetS() // want `avoid direct access to proto field t\.S, use t\.GetS\(\) instead`

	for _, v := range t.GetRepeatedEmbeddeds() { // want `avoid direct access to proto field t\.RepeatedEmbeddeds, use t\.GetRepeatedEmbeddeds\(\) instead`
		_ = v
	}

	fn := func(...interface{}) bool { return false }
	fn((*proto.Test)(nil).GetS()) // want `avoid direct access to proto field \(\*proto\.Test\)\(nil\)\.S, use \(\*proto\.Test\)\(nil\)\.GetS\(\) instead`

	var ptrs *[]proto.Test
	_ = (*ptrs)[42].GetRepeatedEmbeddeds()         // want `avoid direct access to proto field \(\*ptrs\)\[42\]\.RepeatedEmbeddeds, use \(\*ptrs\)\[42\].GetRepeatedEmbeddeds\(\) instead`
	_ = (*ptrs)[t.GetI64()].GetRepeatedEmbeddeds() // want `avoid direct access to proto field \(\*ptrs\)\[t\.I64\]\.RepeatedEmbeddeds, use \(\*ptrs\)\[t\.GetI64\(\)\].GetRepeatedEmbeddeds\(\) instead`

	var anyType interface{}
	_ = anyType.(*proto.Test).GetS() // want `avoid direct access to proto field anyType\.\(\*proto\.Test\)\.S, use anyType\.\(\*proto\.Test\)\.GetS\(\) instead`

	t.GetEmbedded().SetS("test")                              // want `avoid direct access to proto field t\.Embedded\.SetS\("test"\), use t\.GetEmbedded\(\)\.SetS\("test"\) instead`
	t.GetEmbedded().SetMap(map[string]string{"test": "test"}) // want `avoid direct access to proto field t\.Embedded\.SetMap\(map\[string\]string{"test": "test"}\), use t\.GetEmbedded\(\)\.SetMap\(map\[string\]string{"test": "test"}\) instead`

	// Optional enum
	switch t.GetOptEnum() { // want `avoid direct access to proto field \*t\.OptEnum, use t\.GetOptEnum\(\) instead`
	case proto.Test_O_ENUM1:
	case proto.Test_O_ENUM2:
	}

	if t.OptEnum != nil && t.GetOptEnum() == proto.Test_O_ENUM1 { // want `avoid direct access to proto field \*t\.OptEnum, use t\.GetOptEnum\(\) instead`
	}

	_ = t.GetOptEnum() // want `avoid direct access to proto field \*t\.OptEnum, use t\.GetOptEnum\(\) instead`

	t.RepeatedEmbeddeds = append(t.GetRepeatedEmbeddeds(), t.GetRepeatedEmbeddeds()...) // want `avoid direct access to proto field t\.RepeatedEmbeddeds, use t\.GetRepeatedEmbeddeds\(\) instead`
	t.RepeatedEmbeddeds = append(t.RepeatedEmbeddeds, t.GetEmbedded())                  // want `avoid direct access to proto field t\.Embedded, use t\.GetEmbedded\(\) instead`

	_ = t.GetMap() // want `avoid direct access to proto field t\.Map, use t\.GetMap\(\) instead`
	t.Map = map[string]string{}
	t.GetEmbedded().SetMap(t.GetMap()) // want `avoid direct access to proto field t\.GetEmbedded\(\)\.SetMap\(t\.Map\), use t\.GetEmbedded\(\).SetMap\(t.GetMap\(\)\) instead`
	t.GetEmbedded().SetMap(t.GetMap())
	t.GetEmbedded().SetMap(map[string]string{})
	// Issue #16
	t.GetEmbedded().SetMap(make(map[string]string, 5))


	// Issue #10
	_ = many[slicesIndexFunc(many, func(m *proto.Test) bool {
		return strings.Contains(strings.ToLower(m.GetS()), "specific value")
	})].GetS()
}

func testValid(t *proto.Test) {
	func(...interface{}) {}(t.GetB(), t.GetD())
	func(...interface{}) {}(&t.B, &t.D)

	_, t.T = true, true
	_, t.T, _ = true, true, false
	_, _, t.T = true, true, false
	t.T, _ = true, true
	t.D = 2
	t.I32++
	t.I32 += 2

	fmt.Scanf("Test", &t.S, &t.B, &t.T)

	t.D = 1.0
	t.F = 1.0
	t.I32 = 1
	t.I64 = 1
	t.U32 = 1
	t.U64 = 1
	t.T = true
	t.B = []byte{1}
	t.S = "1"
	t.Embedded = &proto.Embedded{}
	t.Embedded.S = "1"
	t.GetEmbedded().S = "1"
	t.Embedded.Embedded = &proto.Embedded{}
	t.GetEmbedded().Embedded = &proto.Embedded{}
	t.Embedded.Embedded.S = "1"
	t.GetEmbedded().GetEmbedded().S = "1"
	t.RepeatedEmbeddeds = []*proto.Embedded{{S: "1"}}

	_ = t.GetD()
	_ = t.GetF()
	_ = t.GetI32()
	_ = t.GetI64()
	_ = t.GetU32()
	_ = t.GetU64()
	_ = t.GetT()
	_ = t.GetB()
	_ = t.GetS()
	_ = t.GetEmbedded()
	_ = t.GetEmbedded().GetS()
	_ = t.GetEmbedded().GetEmbedded()
	_ = t.GetEmbedded().GetEmbedded().GetS()
	_ = t.GetRepeatedEmbeddeds()
	_ = t.GetRepeatedEmbeddeds()[0]
	_ = t.GetRepeatedEmbeddeds()[0].GetS()
	_ = t.GetRepeatedEmbeddeds()[0].GetEmbedded()
	_ = t.GetRepeatedEmbeddeds()[0].GetEmbedded().GetS()

	other := proto.Other{}
	other.MyMethod(nil).CustomMethod()
	other.MyMethod(nil).GetS()

	var tt Test
	_ = tt.Embedded.GetS()
	_ = tt.Embedded.GetEmbedded().GetS()

	ems := t.GetRepeatedEmbeddeds()
	_ = ems[len(ems)-1].GetS()

	ch := make(chan string)
	ch <- t.GetS()

	t.Equal(&proto.Test{S: "test", I64: 42})

	// issue #4
	*t.Embedded = proto.Embedded{}

	v := &proto.Test{
		OptBool: new(bool),
	}
	*v.OptBool = true

	t.RepeatedEmbeddeds = append(t.GetRepeatedEmbeddeds(), t.GetRepeatedEmbeddeds()...)
	t.RepeatedEmbeddeds = append(t.RepeatedEmbeddeds, t.GetEmbedded())
	t.RepeatedEmbeddeds = append(t.RepeatedEmbeddeds, &proto.Embedded{})

	// issue #12
	data := make([]byte, 4)
	_, _ = t.MyMarshal(data[4:])
}

// stubs
func slicesIndexFunc[S ~[]E, E any](s S, f func(E) bool) int {
	return 0
}
